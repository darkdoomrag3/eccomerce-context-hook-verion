{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Emad\\\\AppData\\\\Roaming\\\\npm\\\\node_modules\\\\react-scripts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport CartActionTypes from './cart.type';\nimport { cartItemToAdd, addItemToCart, removeItemFromCart } from './card.utils';\nconst INITIAL_STATE = {\n  hidden: true,\n  cartItems: []\n};\n\nconst cartReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CartActionTypes.TOGGLE_CART_HIDDEN:\n      return _objectSpread({}, state, {\n        hidden: !state.hidden\n      });\n\n    case CartActionTypes.ADD_ITEM:\n      return _objectSpread({}, state, {\n        cartItems: addItemToCart(state.cartItems, action.payload)\n      });\n\n    case CartActionTypes.REMOVE_ITEM:\n      return _objectSpread({}, state, {\n        cartItems: removeItemFromCart(state.cartItems, action.payload)\n      });\n\n    case CartActionTypes.CLEAR_ITEM_FORM_CART:\n      return _objectSpread({}, state, {\n        cartItems: state.cartItems.filter(cartItem => cartItem.id !== action.payload.id)\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["D:\\React fullstack video\\eccomerce git\\React-ecommerce-test\\src\\redux\\cart\\cart.reducer.js"],"names":["CartActionTypes","cartItemToAdd","addItemToCart","removeItemFromCart","INITIAL_STATE","hidden","cartItems","cartReducer","state","action","type","TOGGLE_CART_HIDDEN","ADD_ITEM","payload","REMOVE_ITEM","CLEAR_ITEM_FORM_CART","filter","cartItem","id"],"mappings":";;;;;;AAAA,OAAOA,eAAP,MAA4B,aAA5B;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,kBAAvC,QAAiE,cAAjE;AACA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,MAAM,EAAE,IADU;AAElBC,EAAAA,SAAS,EAAE;AAFO,CAAtB;;AAMA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,aAAT,EAAwBK,MAAxB,KAAmC;AAEnD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKV,eAAe,CAACW,kBAArB;AACI,+BACOH,KADP;AAEIH,QAAAA,MAAM,EAAE,CAACG,KAAK,CAACH;AAFnB;;AAKJ,SAAKL,eAAe,CAACY,QAArB;AACI,+BACOJ,KADP;AAEIF,QAAAA,SAAS,EAAEJ,aAAa,CAACM,KAAK,CAACF,SAAP,EAAkBG,MAAM,CAACI,OAAzB;AAF5B;;AAIJ,SAAKb,eAAe,CAACc,WAArB;AACI,+BACON,KADP;AAEIF,QAAAA,SAAS,EAAEH,kBAAkB,CAACK,KAAK,CAACF,SAAP,EAAkBG,MAAM,CAACI,OAAzB;AAFjC;;AAKJ,SAAKb,eAAe,CAACe,oBAArB;AACI,+BACOP,KADP;AAEIF,QAAAA,SAAS,EAAEE,KAAK,CAACF,SAAN,CAAgBU,MAAhB,CAAuBC,QAAQ,IAAIA,QAAQ,CAACC,EAAT,KAAgBT,MAAM,CAACI,OAAP,CAAeK,EAAlE;AAFf;;AAMJ;AAEI,aAAOV,KAAP;AA3BR;AA8BH,CAhCD;;AAkCA,eAAeD,WAAf","sourcesContent":["import CartActionTypes from './cart.type';\r\nimport { cartItemToAdd, addItemToCart, removeItemFromCart } from './card.utils';\r\nconst INITIAL_STATE = {\r\n    hidden: true,\r\n    cartItems: [],\r\n\r\n}\r\n\r\nconst cartReducer = (state = INITIAL_STATE, action) => {\r\n\r\n    switch (action.type) {\r\n        case CartActionTypes.TOGGLE_CART_HIDDEN:\r\n            return {\r\n                ...state,\r\n                hidden: !state.hidden\r\n            }\r\n\r\n        case CartActionTypes.ADD_ITEM:\r\n            return {\r\n                ...state,\r\n                cartItems: addItemToCart(state.cartItems, action.payload)\r\n            }\r\n        case CartActionTypes.REMOVE_ITEM:\r\n            return {\r\n                ...state,\r\n                cartItems: removeItemFromCart(state.cartItems, action.payload)\r\n            }\r\n\r\n        case CartActionTypes.CLEAR_ITEM_FORM_CART:\r\n            return {\r\n                ...state,\r\n                cartItems: state.cartItems.filter(cartItem => cartItem.id !== action.payload.id)\r\n\r\n            }\r\n\r\n        default:\r\n\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport default cartReducer;\r\n"]},"metadata":{},"sourceType":"module"}